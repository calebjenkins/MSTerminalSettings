name: PowerCD Build
on:
  push:
    branches:
      - master
      - preview
      - ci
      - release/v2.0
  pull_request:
    branches:
      - master
      - preview
jobs:
  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - windows-latest
        psversion:
          - pwsh
          - powershell
    steps:
      - uses: actions/checkout@v1
      - name: Determine PowerCD Cache Folder
        shell: pwsh
        run: |
          $powerCDPath = Join-Path ([Environment]::GetFolderPath('LocalApplicationData')) 'PowerCD'
          $pwshVersion = $IsCoreCLR ? 'powershell' : 'WindowsPowershell'
          $basePath = $IsWindows ?
            [Environment]::GetFolderPath('MyDocuments') :
            [Environment]::GetFolderPath('LocalApplicationData')
          $modulesPath = Join-Path $basePath $pwshVersion 'Modules'

          "::set-env name={0}::{1}" -f 'powercdpath',$powerCDPath
          "::set-env name={0}::{1}" -f 'modulespath',$modulesPath

      - name: Restore Powershell Modules Folder
        uses: actions/cache@v1
        with:
          path: ${{ env.modulespath }}
          key: powershellmodules

      - name: Restore PowerCD Cache Folder
        uses: actions/cache@v1
        with:
          path: ${{ env.powercdpath }}
          key: powercdprerequisites

      - name: Powershell Build
        env:
          PSBUILDEXE: ${{ matrix.psversion }}
        shell: pwsh
        run: |
          & $env:PSBUILDEXE -noninteractive -noprofile -f './build.ps1'
          $myexit = $LASTEXITCODE
          if ($myexit) {exit $myexit}

      - uses: actions/upload-artifact@master
        with:
          name: PSModule-${{ matrix.os }}-${{ matrix.psversion }}
          path: BuildOutput/

  publish:
    name: Publish
    if: contains(github.ref,'release') && github.head_ref == null
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@master
        with:
          name: PSModule-windows-latest-powershell
          path: BuildOutput/

      - name: Create Github Deployment
        id: deployment
        uses: chrnorm/deployment-action@releases/v1
        with:
          token: ${{ github.token }}
          description: Powershell Gallery Prerelease Modules
          target_url: https://www.powershellgallery.com/packages/MSTerminalSettings/
          environment: Powershell Gallery Prerelease
          ref: ${{ github.sha }}

      - name: Powershell Gallery
        env:
          PSGALLERYAPIKEY: ${{ secrets.PSGallery }}
        shell: pwsh
        run: |
          $verbosePreference = 'continue'
          $path = resolve-path ./BuildOutput/MSTerminalSettings
          Publish-Module -path $path -nugetapikey $env:PSGALLERYAPIKEY -whatif

      - name: Github Deployment Success
        if: success()
        uses: chrnorm/deployment-status@releases/v1
        with:
          token: "${{ github.token }}"
          target_url: https://www.powershellgallery.com/packages/MSTerminalSettings/
          state: "success"
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}

      - name: Github Deployment Failure
        if: failure()
        uses: chrnorm/deployment-status@releases/v1
        with:
          token: "${{ github.token }}"
          target_url: https://www.powershellgallery.com/packages/MSTerminalSettings/
          state: "failure"
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}

